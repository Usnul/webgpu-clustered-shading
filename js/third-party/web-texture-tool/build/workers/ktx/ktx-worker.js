importScripts("../worker-util.js");importScripts("libktx.js");const m=new Promise(b=>{LIBKTX().then(b)}),n={BC1_RGB:{format:"bc1-rgb-unorm"},BC3_RGBA:{format:"bc3-rgba-unorm"},BC7_M5_RGBA:{format:"bc7-rgba-unorm"},ETC1_RGB:{format:"etc1-rgb-unorm"},ETC2_RGBA:{format:"etc2-rgba8unorm"},ASTC_4x4_RGBA:{format:"astc-4x4-rgba-unorm"},PVRTC1_4_RGB:{format:"pvrtc1-4bpp-rgb-unorm"},PVRTC1_4_RGBA:{format:"pvrtc1-4bpp-rgba-unorm"},RGBA32:{format:"rgba8unorm",uncompressed:!0},RGB565:{format:"rgb565unorm",uncompressed:!0},RGBA4444:{format:"rgba4unorm",uncompressed:!0}},o=["ETC2_RGBA","BC7_M5_RGBA","BC3_RGBA","ASTC_4x4_RGBA","PVRTC1_4_RGBA","RGBA32"];function p(b){switch(b){case 0:throw new Error("Cannot decode if VkFormat is VK_FORMAT_UNDEFINED");case 23:return"rgb8unorm";case 37:return"rgba8unorm";case 43:return"rgba8unorm-srgb";default:throw new Error(`Unsupported VkFormat: ${b}`)}}function q(b){switch(b){case 0:throw new Error("Cannot decode if glInternalFormat is GL_NONE");case 32849:return"rgb8unorm";case 32856:return"rgba8unorm";case 35905:return"rgb8unorm-srgb";case 35907:return"rgba8unorm-srgb";default:throw new Error(`Unsupported glInternalFormat: ${b}`)}}function r(b){if(b.baseDepth>1)return"3d";{if(b.isCubemap)return b.isArray?"cube-array":"cube";if(b.isArray)return"2d-array"}return"2d"}async function s(b,g,v){const h=await m,a=new h.ktxTexture(new Uint8Array(b));let c;if(a.needsTranscoding){let d;for(const e of o){const f=n[e];if(g.indexOf(f.format)>-1){c=f.format,d=h.TranscodeTarget[e];break}}if(!d)throw new Error("No appropriate transcode format found.");const i=a.transcodeBasis(d,0);if(i!=h.ErrorCode.SUCCESS)throw new Error("Unable to transcode basis texture.")}else if(a.classId==2){c=p(a.vkFormat);if(g.indexOf(c)==-1)throw new Error(`Texture stored in unsupported format: ${c}`)}else if(a.classId==1){c=q(a.glInternalformat);if(g.indexOf(c)==-1)throw new Error(`Texture stored in unsupported format: ${c}`)}if(!c)throw new Error("Unable to identify texture format.");const t=r(a),j=new WorkerTextureData({format:c,type:t,width:a.baseWidth,height:a.baseHeight,depth:a.baseDepth});for(let d=0;d<a.numLevels;++d){const i=j.getLevel(d);for(let e=0;e<a.numLayers;++e)for(let f=0;f<a.numFaces;++f){const u=e*a.numFaces+f,k=a.getImageData(d,e,f),l=new Uint8Array(k.byteLength);l.set(k),i.setSlice(u,l)}}return a.delete(),j}onmessage=createTextureMessageHandler(s);
//# sourceMappingURL=ktx-worker.js.map
