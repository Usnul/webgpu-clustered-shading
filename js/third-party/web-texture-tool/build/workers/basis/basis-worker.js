importScripts("../worker-util.js");importScripts("basis_transcoder.js");const o=new Promise(j=>{BASIS().then(h=>{h.initializeBasis(),j(h.BasisFile)})}),a={cTFETC1_RGB:0,cTFETC2_RGBA:1,cTFBC1_RGB:2,cTFBC3_RGBA:3,cTFBC4_R:4,cTFBC5_RG:5,cTFBC7_RGBA:6,cTFPVRTC1_4_RGB:8,cTFPVRTC1_4_RGBA:9,cTFASTC_4x4_RGBA:10,cTFRGBA32:13,cTFRGB565:14,cTFBGR565:15,cTFRGBA4444:16,cTFTotalTextureFormats:22},c={};c[a.cTFBC1_RGB]={format:"bc1-rgb-unorm"};c[a.cTFBC3_RGBA]={format:"bc3-rgba-unorm"};c[a.cTFBC7_RGBA]={format:"bc7-rgba-unorm"};c[a.cTFETC1_RGB]={format:"etc1-rgb-unorm"};c[a.cTFETC2_RGBA]={format:"etc2-rgba8unorm"};c[a.cTFASTC_4x4_RGBA]={format:"astc-4x4-rgba-unorm"};c[a.cTFPVRTC1_4_RGB]={format:"pvrtc1-4bpp-rgb-unorm"};c[a.cTFPVRTC1_4_RGBA]={format:"pvrtc1-4bpp-rgba-unorm"};c[a.cTFRGBA32]={format:"rgba8unorm",uncompressed:!0};c[a.cTFRGB565]={format:"rgb565unorm",uncompressed:!0};c[a.cTFRGBA4444]={format:"rgba4unorm",uncompressed:!0};const p=0;async function q(j,h,r){const s=await o,d={};for(const b in c){const i=c[b];d[b]=h.indexOf(i.format)>-1}const t=new Uint8Array(j),e=new s(t),l=e.getNumImages(),u=e.getHasAlpha();let k=e.getNumLevels(p);try{if(!l||!k)throw new Error("Invalid Basis data");if(!e.startTranscoding())throw new Error("startTranscoding failed");let b;u?d[a.cTFETC2_RGBA]?b=a.cTFETC2_RGBA:d[a.cTFBC7_RGBA]?b=a.cTFBC7_RGBA:d[a.cTFBC3_RGBA]?b=a.cTFBC3_RGBA:d[a.cTFASTC_4x4_RGBA]?b=a.cTFASTC_4x4_RGBA:d[a.cTFPVRTC1_4_RGBA]?b=a.cTFPVRTC1_4_RGBA:b=a.cTFRGBA32:d[a.cTFETC1_RGB]?b=a.cTFETC1_RGB:d[a.cTFBC7_RGBA]?b=a.cTFBC7_RGBA:d[a.cTFBC1_RGB]?b=a.cTFBC1_RGB:d[a.cTFETC2_RGBA]?b=a.cTFETC2_RGBA:d[a.cTFASTC_4x4_RGBA]?b=a.cTFASTC_4x4_RGBA:d[a.cTFPVRTC1_4_RGB]?b=a.cTFPVRTC1_4_RGB:d[a.cTFRGB565]?b=a.cTFRGB565:b=a.cTFRGBA32;if(b===void 0)throw new Error("No supported transcode formats");const i=c[b];(i.uncompressed||!r)&&(k=1);const m=new WorkerTextureData({format:i.format,width:e.getImageWidth(0,0),height:e.getImageHeight(0,0)});for(let f=0;f<k;++f){const v=m.getLevel(f,{width:e.getImageWidth(0,f),height:e.getImageHeight(0,f)});for(let g=0;g<l;++g){const w=e.getImageTranscodedSizeInBytes(g,f,b),n=new Uint8Array(w);if(!e.transcodeImage(n,g,f,b,1,0))throw new Error("transcodeImage failed");v.setSlice(g,n)}}return m}finally{e.close(),e.delete()}}onmessage=createTextureMessageHandler(q);
//# sourceMappingURL=basis-worker.js.map
